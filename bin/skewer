#!/usr/bin/env ruby
$: << File.join(File.dirname(__FILE__), '..', 'lib')
require 'rubygems'
require 'bundler'
require 'optparse'
require 'parser'

options = {:kind => :ersatz}

type = ARGV.shift

optparse = OptionParser.new do |opts|
  #
  # Provision
  #
  opts.on('-c', '--cloud KIND', "Cloud kind ('ec2', 'linode', 'rackspace')") do |c|
    options[:kind] = c.to_sym
  end

  opts.on('-r', '--role NAME', "puppet role class to call") do |r|
    options[:role] = r
  end

  opts.on('-pc', '--puppetcode') do |pc|
    options[:puppet_repo] = pc
  end

  opts.on('-m', '--mock') do
    options[:mock] = true
  end

  opts.on('--keep') do
    options[:keep] = true
  end

  opts.on('-hk', '--hook') do |hook|
    options[:hook] = hook
  end

  # AWS options
  opts.on('-i', '--image NAME') do |img|
    options[:image] = img
  end
  opts.on('--volume SIZE') do |vol|
    # EBS group
    options[:volume] = vol
  end
  opts.on('--region NAME') do |region|
    # AWS region
    options[:region] = region
  end
  opts.on('--key', '--key_name NAME') do |k|
    # AWS SSH key
    options[:key_name] = k
  end
  opts.on('--group NAME') do |group|
    # EC2 Security Group
    options[:group] = group
  end
  opts.on('--flavor FLAVOR') do |flavor|
    # AWS instance size
    options[:flavor_id] = flavor
  end

  #
  # Updating.
  #
  # TODO: This shouldn't be -h for hostname.
  opts.on('-h', '--host KIND', "Hostname to update") do |c|
    options[:host] = c
  end
  opts.on('-u', '--user KIND', "User to connect with") do |u|
    options[:user] = u
  end
  opts.on('-r', '--role NAME', "puppet role class to call") do |r|
    options[:role] = r
  end
  opts.on('-n', '--noop', "do a dry run first") do
    options[:noop] = true
  end
  opts.on('-pc', '--puppetcode') do |pc|
    options[:puppet_repo] = pc
    puts "puppetcode is: " + pc
  end

  opts.on('--features DIRECTORY') do |dir|
    options[:cuke_dir] = dir
  end
  
  # TODO: Fix this, and update the above for --host/-h
  opts.on('-q', '--help') do
    options[:help] = true
  end
end

optparse.parse!

Fog.mock! if options[:mock]

Skewer::CLI::Parser.new(type, options)
